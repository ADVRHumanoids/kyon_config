name: Build and Push Kyon Docker Images

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

env:
  DOCKER_REGISTRY: hhcmhub
  TAG_NAME: ${{ github.ref_name }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      ros1: ${{ steps.changes.outputs.ros1 }}
      ros2: ${{ steps.changes.outputs.ros2 }}
      build-all: ${{ steps.changes.outputs.build-all }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Detect changed files
        uses: dorny/paths-filter@v3
        id: changes
        with:
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before || 'HEAD~1' }}
          filters: |
            ros1:
              - 'docker/kyon-config_ros1.env'
              - 'docker/kyon-cetc-focal-ros1/**'
              - 'docker/kyon-cetc-focal-ros1-xeno/**'
              - 'gui/ros1/**'
            ros2:
              - 'docker/kyon-config_ros2.env'
              - 'docker/kyon-cetc-noble-ros2/**'
              - 'docker/kyon-cetc-noble-ros2-xeno/**'
              - 'gui/ros2/**'

  build-ros1:
    needs: detect-changes
    # Build on tags or when ROS1 changes detected
    if: |
      startsWith(github.ref, 'refs/tags/v') || 
      needs.detect-changes.outputs.ros1 == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: |
          startsWith(github.ref, 'refs/tags/v') || 
          github.ref == 'refs/heads/main' || 
          github.ref == 'refs/heads/master'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build all ROS1 images
        run: |
          cd docker
          export TAGNAME=${{ env.TAG_NAME }}
          echo "Building ROS1 stack with tag: $TAGNAME"
          
          # Build all ROS1 images (base, locomotion, xeno) together
          ./build-kyon.bash --ros1
          
          # Show what we built
          echo "Images created:"
          docker images | grep "${DOCKER_REGISTRY}" | grep "focal-ros1" | grep "${TAGNAME}"

      - name: Push ROS1 images
        if: |
          startsWith(github.ref, 'refs/tags/v') || 
          (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
        run: |
          cd docker
          export TAGNAME=${{ env.TAG_NAME }}
          ./build-kyon.bash --ros1 --push

  build-ros2:
    needs: detect-changes
    # Build on tags or when ROS2 changes detected
    if: |
      startsWith(github.ref, 'refs/tags/v') || 
      needs.detect-changes.outputs.ros2 == 'true' || 
      needs.detect-changes.outputs.build-all == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: |
          startsWith(github.ref, 'refs/tags/v') || 
          github.ref == 'refs/heads/main' || 
          github.ref == 'refs/heads/master'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build all ROS2 images
        run: |
          cd docker
          export TAGNAME=${{ env.TAG_NAME }}
          echo "Building ROS2 stack with tag: $TAGNAME"
          
          # Build all ROS2 images (base, sim, xeno) together
          ./build-kyon.bash --ros2
          
          # Show what we built
          echo "Images created:"
          docker images | grep "${DOCKER_REGISTRY}" | grep "noble-ros2" | grep "${TAGNAME}"

      - name: Push ROS2 images
        if: |
          startsWith(github.ref, 'refs/tags/v') || 
          (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'))
        run: |
          cd docker
          export TAGNAME=${{ env.TAG_NAME }}
          ./build-kyon.bash --ros2 --push

  summary:
    needs: [detect-changes, build-ros1, build-ros2]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Build Summary
        run: |
          echo "## Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Just simple, clear information
          echo "**Tag:** ${{ env.TAG_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # ROS1 status
          if [[ "${{ needs.build-ros1.result }}" == "success" ]]; then
            echo "ROS1 images built successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-ros1.result }}" == "failure" ]]; then
            echo "ROS1 build failed - check the logs" >> $GITHUB_STEP_SUMMARY
          else
            echo "ROS1 build was skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
          fi
          
          # ROS2 status
          if [[ "${{ needs.build-ros2.result }}" == "success" ]]; then
            echo "ROS2 images built successfully" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.build-ros2.result }}" == "failure" ]]; then
            echo "ROS2 build failed - check the logs" >> $GITHUB_STEP_SUMMARY
          else
            echo "ROS2 build was skipped (no changes detected)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add push status if relevant
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "Images pushed to registry (release tag detected)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "Images pushed to registry (main branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "Images built locally only (no push for PRs/feature branches)" >> $GITHUB_STEP_SUMMARY
          fi